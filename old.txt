#provider "aws" {
#access_key = var.aws_access_key
#secret_key = var.aws_secret_key
#region     = "us-east-1"
#}

# Create VPC
resource "aws_vpc" "custom_vpc" {
  cidr_block           = var.vpc_cidr_block
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "CustomVPC"
  }
}

# Create Subnets
resource "aws_subnet" "custom_subnet" {
  count                   = length(var.subnet_cidr_blocks)
  vpc_id                  = aws_vpc.custom_vpc.id
  cidr_block              = var.subnet_cidr_blocks[count.index]
  availability_zone       = element(["us-east-1a", "us-east-1b", "us-east-1c", "us-east-1d"], count.index)
  map_public_ip_on_launch = true
}

# Create Security Group
resource "aws_security_group" "custom_security_group" {
  vpc_id = aws_vpc.custom_vpc.id
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = -1
    to_port     = -1
    protocol    = "icmp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "CustomSecurityGroup"
  }
}

# Create EC2 Instances
resource "aws_instance" "ec2_instances" {
  count                  = 4
  ami                    = var.ami
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.custom_subnet[count.index].id
  vpc_security_group_ids = [aws_security_group.custom_security_group.id]
  key_name      = "olowo-terra"
  tags = {
    Name = element(["kube-master1", "kube-master2", "kube-worker1", "kube-worker2"], count.index)
  }

  provisioner "local-exec" {
    command = <<-EOF
      echo "Instance ${count.index + 1} - IP: \$(aws ec2 describe-instances --instance-ids ${self.id} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text) Hostname: \$(aws ec2 describe-instances --instance-ids ${self.id} --query 'Reservations[0].Instances[0].PublicDnsName' --output text)"
    EOF
 }
}